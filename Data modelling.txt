---------------------
STARTING KARMA
---------------------

1. Start command prompt 
	- Start Button -> Command Prompt 
	- or type cmd.exe into the Start Menu search
	
2. Go to the directory where Karma is stored 
	- Type 'dir' to see a listing of all files/folders in a directory
	- Type 'cd [folder]' to move into the specified folder
		Ex. '> cd Documents' will take you into the Documents folder
		Ex. '> cd ..' moves you back a directory in case you choose the wrong one. 
	- Full path: C:\Users\kax2\Documents\Github\Web-Karma>
		
3. Type 'mvn jetty:run' to start maven. When Karma has finished building, 
	there should be a message on command prompt that says "Finished Jetty Server". 
	
---------------------
IMPORTING DATA
---------------------

1. Go to 'localhost:8080/web-karma.html' in a web browser (I use Chrome). 
2. TWO OPTIONS FOR DATA IMPORT
	a. Import a database view: 
		- Click 'Import Database Table' and fill in the corresponding information: 
			- Database Type - SQLServer
			- Host Name - bac5-dev
			- Port Number - 1433
			- Username - dcp23
			- Password - export23
			- Database Name - zztms
		- When prompted to choose the table, select 'KARMA_objects_view'
			- This is the temporary view that we've been using to create the model. 
				The more permanat option is to import from file. 
	b. Import from file: 
		- Click 'Import File...'
			- All converted CSV files (see 'CONVERTING TO CSV FILES' if no files)
				are located in directory '..\Libraries\Documents\python'
			- Click on one of the files (e.g. 'Objects_small') and import as 
				'CSV Text File'. 
				
------------------------
DATA MODELLING
------------------------

1. To apply a model from previous sessions, go to the drop down bar next to 
	the file name and select 'Apply R2RML Model'. 
	a. All published R2RML models will be in the directory 
		'..\Documents\GitHub\Web-Karma\src\main\webapp\publish\R2RML'
	b. The current model that we are using for Objects is
		'WSP1WS1-KARMA_ojbects_view-mode.ttl'
		
2. ADD INFO ON ACTUAL DATA MODELLING

3. TO UNDO ANY ACCIDENTAL CHANGES, go to the left-hand side of Karma under 
	'Command History'. Hover over the change that you want to undo (NOTE that all 
	changes after that change will be erased as well) and click the red undo 
	button. Changes should be rolled back to the previous state. 

-------------------------
PUBLISHING MODEL
------------------------

1. If changes have been made to the current model, and you want to save model, 
	go to the drop down bar next to the file name and select 'Publish Model'
	a. Hit submit. The model file should located in the same directory as 
		above: ('..\Documents\GitHub\Web-Karma\src\main\webapp\publish\R2RML')
	b. There should be a pop-up notification that says 'R2RML Model published'
		on success. 
		
------------------------
FILE CONVERSION 
------------------------

1. To update the files after running Coboat, go to the directory that contains the 
	program txt2csv.py ('.\Documents\python'). 
2. Delete all current files in that folder except for txt2csv.py 

3. Go to command prompt (Start -> command prompt). 
4. Go into the directory that contains the program using cd/dir. 
5. run the program by typing: 
	'> python txt2csv.py'

------------------------
UPDATING KARMA
-----------------------

1. To update the current version of Karma, go to the GitHub application (blue circle icon
	with a white cat head) and go to the main page (back button at top left of application). \
2. Click on Web-Karma (the arrow pointing left on the repo). 
3. Click 'sync' button on the right corner. 
4. If the sync fails, make sure all instances of Karma are closed and try again. 
	a. Go to command prompt and type in CTRL-c
	b. Wait until it prompts and type 'Y' for yes. 
5. If all else fails ask Pedro/Dipsy/Kevin. 


	
	
txt2csv converts all .txt files from a specified source directory into
CSV files and placed into the current working directory. The CSV files are 
quote bounded and all original .txt files are unaltered. 

Usage: 
- Use 'cd' and 'dir' to navigate into the directory that contains 
	txt2csv. 
- Run by entering the command: 
	> python txt2csv.py
	- Enter the FULL source directory where the .txt files are stored			
	
			
			
-----------------------
PUBLISHING DATA FOR THE WIKI
-----------------------
		
To save your data, Karma allows you to publish the state of your model: click 
on the worksheet menu and select 'Publish Model'. By default the model is 
saved to the '.\Web-Karma\src\main\webapp\publish\R2RML' folder. 

---------------------------
Applying an Existing Model
---------------------------

To apply a previous model to the current data, click on the worksheet menu and select
'Apply R2RML Model'. Previous models are saved under the 
'.\Web-Karma\src\main\webapp\publish\R2RML' folder. 

The same models can be applied to different sources of data as well. Karma searches for 
attribute names in the current data that match the column names in the model file. Therefore, 
a model built using a database view will have an identical mapping to a .csv text file with the
same column names. 


Contect
	- Alwasy append to context
	
OpenRDF on rigth side of the screen - this is the triple store
	-> karma data -> click on contexts
	- TWO CONTEXTS
	- click on 1 that's the data
	
	- Types - These are the types that have been used in the modelling of the data
		- If you click on one of them, you see how they are linked up. 
		
	46764
	<http://collection.britishart.yale.edu/id/object/7>
	
	- Explore allows you to search
		- Under "context" on the right, both of teh contexts show
		- In the triple store for that URI, it's linked to both of the contexts
			- RDF - AS LONG AS YOU USE THE SAME URI, THE TRIPLES THAT COME FROM ONE
				FILE /OTHER THEY ALL GET MERGED TOGETHER IN THE TRIPLE STORE
				- Context tab allows you to see where they all came from
		- Doesn't duplicate - if it sees an existing 
	- URI has to be the same. 
		*****DESIGN URI STRUCTURE
		
	- PUBLISH MODEL FOR BOTH. 
	
	- GIT COMMANDS
		- git reset --hard HEAD
		- git pull
		
		- why is sync not good? for git? 
			- sync tries to do a push and pull
	
	- New feature for character encoding
		- foreign characters
		- Non ASCII characters - if you don't have the right encoding it won't display correctly
	
	- How do I check which branch I'm currently on? 
		
	- Change existing column. 
		- Edit PyTransform of existing column
	
	- Why do you clear the context? 
		- modify -> vclera
		- Keeps the model. Clears the data. if you mess up and model a file /realize that in that 
			context you didn't do it correctly, you can just clear that individual context, then 
			publish RDF again and re-create the context. 
	
	- Use SPARQL queries to check the RDF
		- Can look at RDF in the workbench. Use SPARQL to see if everythign isg good. 
	
	- Another way to look at RDF - click on RDF link to the right of the table name
	- In the workbench you can click around 
	
12/9/13
DATA MODELLING


APPENDIX - references

namespace: 	collection.britishart.yale.edu/
objects
books
exhibitions

Use other people's uris when we're not the authority
subject terms (ex. keywords, classifications, object types)
	- Right now using Getty vocabulary. ULAN for people (if not here, supplmenet it ourself). 

QUESTIONS; 
Can you have multiple properties for a certain field?????
What is the purpose of the field that is denoted as the "class link"? 
Multiple properties don't show. 
<http://collection.britishart.yale.edu/id/thesauri/identifier/inventory-number> a crm:E55_Type , skos:Concept ;
	skos:inScheme <http://collection.britishart.yale.edu/id/thesauri/identifier/> ;
	skos:prefLabel "Inventory number" .
	
	inscheme??
How do you do a label to ObjectID?
	- **What if you just did a few separate data models (using the same file) for each 
		unique identifier? Would solve the problem of potentially duplicating the ObjectID field. 
Do we need to specify some kind of link/label for ObjectID? Or does it automatically get used 
	when other fields depend on it?
Variable number of fields...?
	
	
	
	
	
	
	
	
	
Data Modelling

- For right now do things bottom-up. 
	- To create a class-link, click on the box that 
		says 'contains  URI for node: _____'. 


TODO: 
	- Remove objectID -1 from the table 
	- For each of the sub productions, how do you know which classification to use? 
		- inventory/collection/tms? 
	- ObjectID URI for each of the four identifier types??
		- TMS, Inventory-number, CCD, LIDO

POSSIBLE BUGS? 
	- When you create URI it doesn't return * ..? 
	- Do you have to create the R2RML folder manually in 
		/src/main/webapp/publish/R2RML? Might've been fixed in new version
		
To delete a  node that doesn't seem like it'll delete, start at the bottom 
(little black circle right above column) and empty the semantic types and submit. 

If you don't see the proper class in the drop-down menu (if you're going top-down), 
a workaround is to start at the bottom, add the new one, undo, then repeat. '

QUESTIONS TO ASK PEDRO: 
	- Is there a way to delete columns? 	
		- No. 
	- Import a txt file without importing all of the text? 
	
NEXT MEETING
	- Screenshare .bat file for applying different models to the tables in the database
	
	
	
1/31/14

How to define all the concept schemes: 
Change from TopConcept -> inScheme. 

How is it related to the concept models? 	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	